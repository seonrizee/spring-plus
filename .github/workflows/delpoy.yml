name: deploy

# main 브랜치에 push가 발생했을 때 실행
on:
  push:
    branches: [ "main" ]

# ECR 정보
env:
  AWS_REGION: ${{ env.AWS_REGION }}
  ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
  ECR_REGISTRY: ${{ secrets.ECR_REGISTRY }}

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      # 소스 코드 체크아웃
      - name: Checkout
        uses: actions/checkout@v4

      # JDK 17 설정
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'corretto'

      # Gradle 빌드 (테스트 제외)
      - name: Build with Gradle
        run: ./gradlew build -x test

      # AWS 자격 증명 설정
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      # ECR에 Docker 로그인
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      # Docker 이미지 빌드 및 ECR에 푸시
      - name: Build and push Docker image
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:latest .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest

      # EC2에 접속하여 배포 스크립트 실행
      - name: Deploy to EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_PRIVATE_KEY }}
          script: |
            # 배포 스크립트 시작
            cd /home/ubuntu/nbc-expert-app  # 디렉토리로 이동

            # .env.prod 파일 생성
            echo "${{ secrets.PROD_ENV_FILE }}" > .env.prod

            # ECR 로그인
            aws ecr get-login-password --region ${{ env.AWS_REGION }} | docker login --username AWS --password-stdin ${{ env.ECR_REGISTRY }}
            
            # 최신 이미지 pull
            docker pull ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:latest

            # docker copmose pord 파일 생성
            echo "${{ secrets.PROD_DOCKER_COMPOSE_YML }}" > docker-compose.prod.yml
            
            # 기존 컨테이너 중지
            docker compose -f docker-compose.prod.yml down || true

            # 새로운 컨테이너 실행
            docker compose -f docker-compose.prod.yml up -d

            # 불필요한 이미지 삭제
            docker image prune -f