name: CI/CD with Gradle, Docker, ECR, and EC2

on:
  push:
    branches: [ "main" ]

jobs:
  # =======================================================
  # Job 1: Gradle 빌드
  # =======================================================
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'corretto'

      - name: Build with Gradle
        run: ./gradlew build -x test

      # 빌드 결과물(.jar 파일)을 Artifacts로 업로드
      - name: Upload JAR
        uses: actions/upload-artifact@v4
        with:
          name: application-jar # 아티팩트 이름
          path: build/libs/*.jar # 업로드할 파일 경로

  # =======================================================
  # Job 2: Docker 이미지 빌드 및 ECR 푸시
  # =======================================================
  docker-build-push:
    runs-on: ubuntu-latest
    needs: build # 'build' Job이 성공해야 실행됨

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # 이전 Job에서 업로드한 .jar 파일을 다운로드
      - name: Download JAR
        uses: actions/download-artifact@v4
        with:
          name: application-jar
          path: build/libs/ # 다운로드 받을 경로

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build and push Docker image
        run: |
          docker build -t ${{ secrets.ECR_REGISTRY }}/${{ secrets.ECR_REPOSITORY }}:latest .
          docker push ${{ secrets.ECR_REGISTRY }}/${{ secrets.ECR_REPOSITORY }}:latest

  # =======================================================
  # Job 3: EC2에 배포
  # =======================================================
  deploy:
    runs-on: ubuntu-latest
    needs: docker-build-push # 'docker-build-push' Job이 성공해야 실행됨

    steps:
      - name: Deploy to EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_PRIVATE_KEY }}
          script: |
            cd /home/ubuntu/nbc-expert-app

            echo "${{ secrets.PROD_ENV_FILE }}" > .env.prod
            echo "${{ secrets.PROD_DOCKER_COMPOSE_YML }}" > docker-compose.prod.yml

            aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.ECR_REGISTRY }}
            
            docker pull ${{ secrets.ECR_REGISTRY }}/${{ secrets.ECR_REPOSITORY }}:latest
            
            docker compose -f docker-compose.prod.yml down || true
            docker compose -f docker-compose.prod.yml up -d
            
            docker image prune -f